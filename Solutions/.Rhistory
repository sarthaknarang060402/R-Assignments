if (total_terms  <= 0) {
print("enter a positive integer")
} else {
if (total_terms == 1) {
print("Fibonacci sequence:")
print(num1)
} else {
print("Fibonacci sequence:")
print(num1)
print(num2)
while (count < total_terms  ) {
nxt = num1 + num2
print(nxt)
# update values
num1 = num2
num2 = nxt
count = count + 1
}
}
}
#ques4
print("enter two numbers")
5
6
a<-as.integer(readline())
print("type 1 for addition, 2 for subtraction , 3 for multiplication , 4 for division")
3
c<-as.integer(readline())
if(c==2)print(a-b)
if(c==3)print(a*b)
if(c==4)print(a/b)
#ques4
print("enter two numbers")
5
6
a<-as.integer(readline())
#ques4
print("enter two numbers")
a<-as.integer(readline())
b<-as.integer(readline())
print("type 1 for addition, 2 for subtraction , 3 for multiplication , 4 for division")
c<-as.integer(readline())
if(c==1)print(a+b)
if(c==2)print(a-b)
if(c==3)print(a*b)
if(c==4)print(a/b)
#ques4
print("enter two numbers")
print("enter two numbers")
a<-as.integer(readline())
print("type 1 for addition, 2 for subtraction , 3 for multiplication , 4 for division")
c<-as.integer(readline())
if(c==2)print(a-b)
print("enter two numbers")
a<-as.integer(readline())
print("type 1 for addition, 2 for subtraction , 3 for multiplication , 4 for division")
c<-as.integer(readline())
if(c==2)print(a-b)
print("enter two numbers")
a<-as.integer(readline())
print("type 1 for addition, 2 for subtraction , 3 for multiplication , 4 for division")
c<-as.integer(readline())
if(c==2)print(a-b)
source("~/.active-rstudio-document")
a=rep("gold",20)
b=rep("silver",30)
c=rep("bronze",50)
chest=c(a,b,c)
d=sample(x=chest,size=10)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
d
#ques1b
e=sample(c("success","fail"),10,replace=T,prob=c(0.9,0.1))
e
#ques1-othermethod
f=sample(c("gold","silver","bronze"),10,replace=T,prob=c(0.2,0.3,0.5))
f
head(data)
#ques4a
data=iris
str(data)
head(data)
range(max(Sepal.Length)-min(Sepal.Length))
range(data$max(Sepal.Length)-data$min(Sepal.Length))
range(data$(Sepal.Length))
range(data$(Sepal.Length))
range(data$Sepal.Length)
head(data,n=10L)
mean(data$Sepal.Length)
quantile(data$Petal.Length, probs = seq(0,1,0.25))
median(data$Sepal.Length)
median(data$Petal.Length)
lapply(data[,1:4],sd)
a=as.integer(readline)
a<-readline()
5
f=1
for (a in 1 : a)
{
f=(f*a)
a=a-1
}
source("~/.active-rstudio-document")
f
a<-readline()
a<-as.integer(a)
f=1
for (a in 1 : a)
{
f=(f*a)
a=a-1
}
f
source("~/fddggh.R")
source("~/fddggh.R")
dbinom(7,12,1/6)+dbinom(8,12,1/6)+dbinom(9,12,1/6)
pbinom(9,12,prob=1/6)-pbinom(6,12,prob=1/6)
a=rep("gold",20)
b=rep("silver",30)
c=rep("bronze",50)
chest=c(a,b,c)
d=sample(x=chest,size=10)
d
#ques4a
data=iris
str(data)
head(data,n=10L)
range(data$Sepal.Length)
mean(data$Sepal.Length)
median(data$Petal.Length)
quantile(data$Petal.Length, probs = seq(0,1,0.25))
lapply(data[,1:4],sd)#summary
1-pnorm(84,mean=72,sd=15.2)
pnorm(84,72,15.2,lower.tail=FALSE)
dpois(0,5)
ppois(50,50)-ppois(48,50)
ppois(50,50)-ppois(47,50)
rt(100,99)
rchisq(100,2)
rchisq(100,10)
rchisq(10025)
rchisq(100,25)
x=rt(100,99)
hist(x)
y=rchisq(100,2)
hist(a)
hist(a)
y=rchisq(100,2)
z=rchisq(100,10)
a=rchisq(100,25)
hist(a)
install.packages("pracma")
library("pracma")
integral2(x)
integral(x,0,2)
integral(x,0,2,method=m)
integral(fun,0,2,method=m)
fun <- function(x) x
integral(fun,0,2,method=m)
integral(fun,0,2)
read.csv("C:\Storage\WORKSPACE\GitHub\R-Assignments\Ques Sets")
getwd())
getwd()
setwd("C:\Storage\WORKSPACE\GitHub\R-Assignments\")
setwd("C:\Storage\WORKSPACE\GitHub\R-Assignments")
getwd()
setwd("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets")
read.csv("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets/Clt-data.csv")
df=read.csv("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets/Clt-data.csv")
head(df,10)
nrows(df)
nrow(df)
info(df)
colnames(df)
mean(df$Wall.Thickness)
hist(df$Wall.Thickness)
hist(df)
df=read.csv("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets/Clt-data.csv")
hist(df)
hist(df$Wall.Thickness)
getwd()
a=mean(df$Wall.Thickness)
print(a)
hist(df$Wall.Thickness)
abline(v=a, col = "blue", lwd = 4, lty = 4)
abline(v=a, col = "red", lwd = 4, lty = 4)
new=print(sample(df,10,replace=FALSE,prob=NULL)
new
new=sample(df,10,replace=FALSE,prob=NULL)
new
df=read.csv("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets/Clt-data.csv")
new=sample(df,10,replace=FALSE,prob=NULL)
new=sample(df,10,replace=TRUE,prob=NULL)
new
new=sample(df,10,replace=FALSE,prob=NULL)
new
df=read.csv("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets/Clt-data.csv")
new=sample(1:nrow(df),10,replace=FALSE,prob=NULL)
new
df=read.csv("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets/Clt-data.csv")
new=sample(1:nrow(df),10,replace=FALSE,prob=NULL)
new
head(new,5)
new2=sample_n(df, 10)
new2
library(dplyr)
new=sample(1:nrow(df$Wall.Thickness),10,replace=FALSE,prob=NULL)
new
new=sample(1:nrow(df$Wall.Thickness),10,replace=FALSE,prob=NULL)
getwd()
setwd("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets")
getwd()
df=read.csv("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets/Clt-data.csv")
colnames(df)
head(df,10)
nrow(df)
a=mean(df$Wall.Thickness)
print(a)
hist(df$Wall.Thickness)
abline(v=a, col = "red", lwd = 4, lty = 4)
new=sample(1:nrow(df$Wall.Thickness),10,replace=FALSE,prob=NULL)
new
new=sample(1:nrow(df),10,replace=FALSE,prob=NULL)
new
new=sample(df$Wall.Thickness,10,replace=FALSE,prob=NULL)
new
new=sample(df$Wall.Thickness,10,replace=TRUE,prob=NULL)
new
mean(new)
hist(new)
new_10=sample(df$Wall.Thickness,10,replace=TRUE,prob=NULL)
new_10
mean(new)
mean(new_10)
hist(new_10)
new_10=sample(df$Wall.Thickness,10,replace=TRUE,prob=NULL)
new_10
mean(new_10)
hist(new_10)
new_50=sample(df$Wall.Thickness,50,replace=TRUE,prob=NULL)
new_50
mean(new_50)
hist(new_50)
new_500=sample(df$Wall.Thickness,500,replace=TRUE,prob=NULL)
new_500
mean(new_500)
hist(new_500)
new_9000=sample(df$Wall.Thickness,9000,replace=TRUE,prob=NULL)
new_9000
mean(new_9000)
hist(new_9000)
new_50=sample(df$Wall.Thickness,50,replace=TRUE,prob=NULL)
new_50
i=1
df=read.csv("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets/Clt-data.csv")
i=1
out<-c()
for(i in 1 to 9000){
for(i in 1:9000){
new_50=sample(df$Wall.Thickness,50,replace=TRUE,prob=NULL)
append(out, mean(new_50))
}
mean(out)
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_50=sample(df$Wall.Thickness,50,replace=TRUE,prob=NULL)
append(out, mean(new_50))
}
hist(out)
out
for(i in 1:9000){
new_50=sample(df$Wall.Thickness,50,replace=TRUE,prob=NULL)
new_50
append(out, mean(new_50))
}
i=1
out<-c()
for(i in 1:9000){
new_50=sample(df$Wall.Thickness,50,replace=TRUE,prob=NULL)
new_50
append(out, mean(new_50))
}
i=1
out<-c()
for(i in 1:9000){
new_50=sample(df$Wall.Thickness,50,replace=TRUE,prob=NULL)
new_50
}
i=1
out<-c()
for(i in 1:9000){
new_50=sample(df$Wall.Thickness,50,replace=TRUE,prob=NULL)
print(new_50)
}
out=append(out, mean(new_50))
for(i in 1:9000){
new_50=sample(df$Wall.Thickness,50,replace=TRUE,prob=NULL)
out=append(out, mean(new_50))
}
i=1
out<-c()
for(i in 1:9000){
new_50=sample(df$Wall.Thickness,50,replace=TRUE,prob=NULL)
out=append(out, mean(new_50))
}
out
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_50=sample(df$Wall.Thickness,10,replace=TRUE,prob=NULL)
out=append(out, mean(new_50))
}
out
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_50=sample(df$Wall.Thickness,10,replace=TRUE,prob=NULL)
out=append(out, mean(new_50))
}
out
hist(out)
abline(v=a, col = "red", lwd = 4, lty = 3)
getwd()
setwd("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets")
getwd()
df=read.csv("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets/Clt-data.csv")
colnames(df)
head(df,10)
nrow(df)
a=mean(df$Wall.Thickness)
print(a)
hist(df$Wall.Thickness)
abline(v=a, col = "red", lwd = 4, lty = 3)
abline(v=a, col = "red", lwd = 1, lty = 1)
hist(df$Wall.Thickness)
abline(v=a, col = "red", lwd = 1, lty = 1)
hist(df$Wall.Thickness)
abline(v=a, col = "red", lwd = 3, lty = 1)
i=1
out<-c()
for(i in 1:9000){
new_10=sample(df$Wall.Thickness,10,replace=TRUE,prob=NULL)
out=append(out, mean(new_10))
}
out
mean(out)
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_50=sample(df$Wall.Thickness,50,replace=TRUE,prob=NULL)
out=append(out, mean(new_50))
}
mean(out)
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_500=sample(df$Wall.Thickness,500,replace=TRUE,prob=NULL)
out=append(out, mean(new_500))
}
mean(out)
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_9000=sample(df$Wall.Thickness,9000,replace=TRUE,prob=NULL)
out=append(out, mean(new_9000))
}
mean(out)
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_10=sample(df$Wall.Thickness,10,replace=TRUE,prob=NULL)
out=append(out, mean(new_10))
}
mean(out)
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_50=sample(df$Wall.Thickness,50,replace=TRUE,prob=NULL)
out=append(out, mean(new_50))
}
mean(out)
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_500=sample(df$Wall.Thickness,500,replace=TRUE,prob=NULL)
out=append(out, mean(new_500))
}
mean(out)
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_9000=sample(df$Wall.Thickness,9000,replace=TRUE,prob=NULL)
out=append(out, mean(new_9000))
}
mean(out)
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_9000=sample(df$Wall.Thickness,9000,replace=TRUE,prob=NULL)
out=append(out, mean(new_9000))
}
df=read.csv("C:/Storage/WORKSPACE/GitHub/R-Assignments/Ques Sets/Clt-data.csv")
i=1
out<-c()
for(i in 1:9000){
new_9000=sample(df$Wall.Thickness,9000,replace=TRUE,prob=NULL)
out=append(out, mean(new_9000))
}
mean(out)
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_500=sample(df$Wall.Thickness,500,replace=TRUE,prob=NULL)
out=append(out, mean(new_500))
}
mean(out)
hist(out)
i=1
out<-c()
for(i in 1:9000){
new_9000=sample(df$Wall.Thickness,9000,replace=TRUE,prob=NULL)
out=append(out, mean(new_9000))
}
mean(out)
hist(out)
setwd("C:/Storage/WORKSPACE/GitHub/R-Assignments/Solutions")
#q4
data(iris)
head(iris,5)
str(iris)
interquart=quantile(iris$Sepal.Length,0.75)-quantile(iris$Sepal.Length,0.25)
print(interquart)
sd(iris$Sepal.Length)
var(iris$Sepal.Length)
summary(iris)
#q5
mode <- function(v){
mele<-0
lcount<-0
g<-length(v)-1
for (i in 1:g) {
ccount<-1
k<-i+1
for (j in k:length(v)) {
if(v[i]==v[j])
ccount=ccount+1
}
if(ccount>lcount){
lcount<-ccount
mele<-v[i]
}
}
return(mele)
}
v <- c(2,1,2,5,1,2,3,4,1,2,3,3,3,3)
mode(v)
v <- c(2,1,2,5,1,2,3,4,1,2,2,2,3,3)
mode(v)
#q1
a<-dbinom(7,12,prob = (1/6))
b<-dbinom(8,12,prob = (1/6))
c<-dbinom(9,12,prob = (1/6))
#q1
a<-dbinom(7,12,prob = (1/6))
b<-dbinom(8,12,prob = (1/6))
c<-dbinom(9,12,prob = (1/6))
d<-a+b+c
d
sum=0
for (i in 7:9) {
sum=sum+dbinom(i,12,prob = (1/6))
}
sum
f<-pbinom(9,size = 12,prob = (1/6))-pbinom(6,size = 12,prob = (1/6))
diff(pbinom(c(6,9),12,prob = (1/6)))
qbinom(0.9999992,12,prob = (1/6))
qbinom(0.9999992,12,prob = (1/6))
qbinom(7,12,prob = (1/6))
qbinom(0.166667,12,prob = (1/6))
#q2
1-pnorm(84,72,15.2)
#q2
pnorm(84,72,15.2,lower.tail=FALSE)
#q2
1-pnorm(84,72,15.2)
dpois(0,5)
m<-ppois(50,50)
n<-ppois(47,50)
m1<-m-n
m1
#q3
diff(ppois(c(48,50),50))
#q3
diff(ppois(c(47,50),50))
